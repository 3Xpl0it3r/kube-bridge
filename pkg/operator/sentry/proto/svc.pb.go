// Code generated by protoc-gen-go. DO NOT EDIT.
// source: svc.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RecordRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordRequest) Reset()         { *m = RecordRequest{} }
func (m *RecordRequest) String() string { return proto.CompactTextString(m) }
func (*RecordRequest) ProtoMessage()    {}
func (*RecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{0}
}

func (m *RecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordRequest.Unmarshal(m, b)
}
func (m *RecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordRequest.Marshal(b, m, deterministic)
}
func (m *RecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordRequest.Merge(m, src)
}
func (m *RecordRequest) XXX_Size() int {
	return xxx_messageInfo_RecordRequest.Size(m)
}
func (m *RecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordRequest proto.InternalMessageInfo

func (m *RecordRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RecordResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecordResponse) Reset()         { *m = RecordResponse{} }
func (m *RecordResponse) String() string { return proto.CompactTextString(m) }
func (*RecordResponse) ProtoMessage()    {}
func (*RecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{1}
}

func (m *RecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecordResponse.Unmarshal(m, b)
}
func (m *RecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecordResponse.Marshal(b, m, deterministic)
}
func (m *RecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordResponse.Merge(m, src)
}
func (m *RecordResponse) XXX_Size() int {
	return xxx_messageInfo_RecordResponse.Size(m)
}
func (m *RecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordResponse proto.InternalMessageInfo

func (m *RecordResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func init() {
	proto.RegisterType((*RecordRequest)(nil), "proto.RecordRequest")
	proto.RegisterType((*RecordResponse)(nil), "proto.RecordResponse")
}

func init() {
	proto.RegisterFile("svc.proto", fileDescriptor_e5747b2e02f0c537)
}

var fileDescriptor_e5747b2e02f0c537 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2e, 0x4b, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xca, 0x5c, 0xbc, 0x41, 0xa9, 0xc9,
	0xf9, 0x45, 0x29, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89,
	0xb9, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x02, 0x17, 0x1f, 0x4c,
	0x51, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x10, 0x1f, 0x17, 0x53, 0x7e, 0x36, 0x58, 0x0d, 0x47,
	0x10, 0x53, 0x7e, 0xb6, 0xd1, 0x21, 0x46, 0x2e, 0x21, 0x88, 0x12, 0xe7, 0xca, 0xe4, 0x9c, 0xd4,
	0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x33, 0x2e, 0xd6, 0xfc, 0x3c, 0xc7, 0x94, 0x14,
	0x21, 0x11, 0x88, 0xad, 0x7a, 0x28, 0x76, 0x49, 0x89, 0xa2, 0x89, 0x42, 0x0c, 0x57, 0x62, 0x10,
	0xb2, 0xe4, 0xe2, 0xc8, 0xcf, 0x73, 0x49, 0xcd, 0x49, 0x2d, 0x49, 0x25, 0x4b, 0x6b, 0x68, 0x41,
	0x4a, 0x22, 0xc9, 0x5a, 0x93, 0xd8, 0xc0, 0xe2, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06,
	0xcd, 0xb5, 0x15, 0x26, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecordCycleServiceClient is the client API for RecordCycleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordCycleServiceClient interface {
	OnAdd(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	OnDelete(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	OnUpdate(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
}

type recordCycleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordCycleServiceClient(cc grpc.ClientConnInterface) RecordCycleServiceClient {
	return &recordCycleServiceClient{cc}
}

func (c *recordCycleServiceClient) OnAdd(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/proto.RecordCycleService/onAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCycleServiceClient) OnDelete(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/proto.RecordCycleService/onDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCycleServiceClient) OnUpdate(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/proto.RecordCycleService/onUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordCycleServiceServer is the server API for RecordCycleService service.
type RecordCycleServiceServer interface {
	OnAdd(context.Context, *RecordRequest) (*RecordResponse, error)
	OnDelete(context.Context, *RecordRequest) (*RecordResponse, error)
	OnUpdate(context.Context, *RecordRequest) (*RecordResponse, error)
}

// UnimplementedRecordCycleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedRecordCycleServiceServer struct {
}

func (*UnimplementedRecordCycleServiceServer) OnAdd(ctx context.Context, req *RecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnAdd not implemented")
}
func (*UnimplementedRecordCycleServiceServer) OnDelete(ctx context.Context, req *RecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnDelete not implemented")
}
func (*UnimplementedRecordCycleServiceServer) OnUpdate(ctx context.Context, req *RecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnUpdate not implemented")
}

func RegisterRecordCycleServiceServer(s *grpc.Server, srv RecordCycleServiceServer) {
	s.RegisterService(&_RecordCycleService_serviceDesc, srv)
}

func _RecordCycleService_OnAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCycleServiceServer).OnAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RecordCycleService/OnAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCycleServiceServer).OnAdd(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCycleService_OnDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCycleServiceServer).OnDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RecordCycleService/OnDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCycleServiceServer).OnDelete(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCycleService_OnUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCycleServiceServer).OnUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RecordCycleService/OnUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCycleServiceServer).OnUpdate(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordCycleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RecordCycleService",
	HandlerType: (*RecordCycleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "onAdd",
			Handler:    _RecordCycleService_OnAdd_Handler,
		},
		{
			MethodName: "onDelete",
			Handler:    _RecordCycleService_OnDelete_Handler,
		},
		{
			MethodName: "onUpdate",
			Handler:    _RecordCycleService_OnUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.proto",
}
